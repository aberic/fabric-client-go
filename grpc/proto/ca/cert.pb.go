// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/proto/ca/cert.proto

package ca

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 生成根密钥、tls密钥及两者自签名根证书内容请求
type ReqRootCrypto struct {
	// 组织名称，如org1
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 组织域名，如example.com
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// 生成csr请求证书转译pkix.Name
	Subject *Subject `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	// ca密钥生成配置结构
	Config *CryptoConfig `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	// tls ca密钥生成配置结构
	TlsConfig            *CryptoConfig `protobuf:"bytes,5,opt,name=tlsConfig,proto3" json:"tlsConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReqRootCrypto) Reset()         { *m = ReqRootCrypto{} }
func (m *ReqRootCrypto) String() string { return proto.CompactTextString(m) }
func (*ReqRootCrypto) ProtoMessage()    {}
func (*ReqRootCrypto) Descriptor() ([]byte, []int) {
	return fileDescriptor_42249d15fbfb5bb8, []int{0}
}

func (m *ReqRootCrypto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqRootCrypto.Unmarshal(m, b)
}
func (m *ReqRootCrypto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqRootCrypto.Marshal(b, m, deterministic)
}
func (m *ReqRootCrypto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqRootCrypto.Merge(m, src)
}
func (m *ReqRootCrypto) XXX_Size() int {
	return xxx_messageInfo_ReqRootCrypto.Size(m)
}
func (m *ReqRootCrypto) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqRootCrypto.DiscardUnknown(m)
}

var xxx_messageInfo_ReqRootCrypto proto.InternalMessageInfo

func (m *ReqRootCrypto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReqRootCrypto) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ReqRootCrypto) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *ReqRootCrypto) GetConfig() *CryptoConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ReqRootCrypto) GetTlsConfig() *CryptoConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

// 生成根密钥、tls密钥及两者自签名根证书内容返回结构
type RespRootCrypto struct {
	// 请求返回结果：success=0；fail=1
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=ca.Code" json:"code,omitempty"`
	// 当且仅当返回码为1时，此处包含错误信息
	ErrMsg               string   `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	PriKeyBytes          []byte   `protobuf:"bytes,4,opt,name=priKeyBytes,proto3" json:"priKeyBytes,omitempty"`
	PubKeyBytes          []byte   `protobuf:"bytes,5,opt,name=pubKeyBytes,proto3" json:"pubKeyBytes,omitempty"`
	CertBytes            []byte   `protobuf:"bytes,6,opt,name=certBytes,proto3" json:"certBytes,omitempty"`
	TlsPriKeyBytes       []byte   `protobuf:"bytes,7,opt,name=tlsPriKeyBytes,proto3" json:"tlsPriKeyBytes,omitempty"`
	TlsPubKeyBytes       []byte   `protobuf:"bytes,8,opt,name=tlsPubKeyBytes,proto3" json:"tlsPubKeyBytes,omitempty"`
	TlsCertBytes         []byte   `protobuf:"bytes,9,opt,name=tlsCertBytes,proto3" json:"tlsCertBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespRootCrypto) Reset()         { *m = RespRootCrypto{} }
func (m *RespRootCrypto) String() string { return proto.CompactTextString(m) }
func (*RespRootCrypto) ProtoMessage()    {}
func (*RespRootCrypto) Descriptor() ([]byte, []int) {
	return fileDescriptor_42249d15fbfb5bb8, []int{1}
}

func (m *RespRootCrypto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RespRootCrypto.Unmarshal(m, b)
}
func (m *RespRootCrypto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RespRootCrypto.Marshal(b, m, deterministic)
}
func (m *RespRootCrypto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespRootCrypto.Merge(m, src)
}
func (m *RespRootCrypto) XXX_Size() int {
	return xxx_messageInfo_RespRootCrypto.Size(m)
}
func (m *RespRootCrypto) XXX_DiscardUnknown() {
	xxx_messageInfo_RespRootCrypto.DiscardUnknown(m)
}

var xxx_messageInfo_RespRootCrypto proto.InternalMessageInfo

func (m *RespRootCrypto) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_Success
}

func (m *RespRootCrypto) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *RespRootCrypto) GetPriKeyBytes() []byte {
	if m != nil {
		return m.PriKeyBytes
	}
	return nil
}

func (m *RespRootCrypto) GetPubKeyBytes() []byte {
	if m != nil {
		return m.PubKeyBytes
	}
	return nil
}

func (m *RespRootCrypto) GetCertBytes() []byte {
	if m != nil {
		return m.CertBytes
	}
	return nil
}

func (m *RespRootCrypto) GetTlsPriKeyBytes() []byte {
	if m != nil {
		return m.TlsPriKeyBytes
	}
	return nil
}

func (m *RespRootCrypto) GetTlsPubKeyBytes() []byte {
	if m != nil {
		return m.TlsPubKeyBytes
	}
	return nil
}

func (m *RespRootCrypto) GetTlsCertBytes() []byte {
	if m != nil {
		return m.TlsCertBytes
	}
	return nil
}

// 生成密钥对请求
type ReqCrypto struct {
	// 密钥生成配置结构
	Config               *CryptoConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReqCrypto) Reset()         { *m = ReqCrypto{} }
func (m *ReqCrypto) String() string { return proto.CompactTextString(m) }
func (*ReqCrypto) ProtoMessage()    {}
func (*ReqCrypto) Descriptor() ([]byte, []int) {
	return fileDescriptor_42249d15fbfb5bb8, []int{2}
}

func (m *ReqCrypto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCrypto.Unmarshal(m, b)
}
func (m *ReqCrypto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCrypto.Marshal(b, m, deterministic)
}
func (m *ReqCrypto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCrypto.Merge(m, src)
}
func (m *ReqCrypto) XXX_Size() int {
	return xxx_messageInfo_ReqCrypto.Size(m)
}
func (m *ReqCrypto) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCrypto.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCrypto proto.InternalMessageInfo

func (m *ReqCrypto) GetConfig() *CryptoConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// 生成密钥对返回结构
type RespCrypto struct {
	// 请求返回结果：success=0；fail=1
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=ca.Code" json:"code,omitempty"`
	// 当且仅当返回码为1时，此处包含错误信息
	ErrMsg               string   `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	PriKeyBytes          []byte   `protobuf:"bytes,4,opt,name=priKeyBytes,proto3" json:"priKeyBytes,omitempty"`
	PubKeyBytes          []byte   `protobuf:"bytes,5,opt,name=pubKeyBytes,proto3" json:"pubKeyBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespCrypto) Reset()         { *m = RespCrypto{} }
func (m *RespCrypto) String() string { return proto.CompactTextString(m) }
func (*RespCrypto) ProtoMessage()    {}
func (*RespCrypto) Descriptor() ([]byte, []int) {
	return fileDescriptor_42249d15fbfb5bb8, []int{3}
}

func (m *RespCrypto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RespCrypto.Unmarshal(m, b)
}
func (m *RespCrypto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RespCrypto.Marshal(b, m, deterministic)
}
func (m *RespCrypto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespCrypto.Merge(m, src)
}
func (m *RespCrypto) XXX_Size() int {
	return xxx_messageInfo_RespCrypto.Size(m)
}
func (m *RespCrypto) XXX_DiscardUnknown() {
	xxx_messageInfo_RespCrypto.DiscardUnknown(m)
}

var xxx_messageInfo_RespCrypto proto.InternalMessageInfo

func (m *RespCrypto) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_Success
}

func (m *RespCrypto) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *RespCrypto) GetPriKeyBytes() []byte {
	if m != nil {
		return m.PriKeyBytes
	}
	return nil
}

func (m *RespCrypto) GetPubKeyBytes() []byte {
	if m != nil {
		return m.PubKeyBytes
	}
	return nil
}

// 生成组织下子节点/用户CA请求证书文件请求
type ReqSignCertificate struct {
	OrgName         string   `protobuf:"bytes,1,opt,name=orgName,proto3" json:"orgName,omitempty"`
	OrgDomain       string   `protobuf:"bytes,2,opt,name=orgDomain,proto3" json:"orgDomain,omitempty"`
	ChildName       string   `protobuf:"bytes,3,opt,name=childName,proto3" json:"childName,omitempty"`
	IsUser          bool     `protobuf:"varint,4,opt,name=isUser,proto3" json:"isUser,omitempty"`
	ParentCertBytes []byte   `protobuf:"bytes,5,opt,name=parentCertBytes,proto3" json:"parentCertBytes,omitempty"`
	ParentPriBytes  []byte   `protobuf:"bytes,6,opt,name=parentPriBytes,proto3" json:"parentPriBytes,omitempty"`
	PubBytes        []byte   `protobuf:"bytes,7,opt,name=pubBytes,proto3" json:"pubBytes,omitempty"`
	Subject         *Subject `protobuf:"bytes,8,opt,name=subject,proto3" json:"subject,omitempty"`
	// 签名算法
	SignAlgorithm        SignAlgorithm `protobuf:"varint,9,opt,name=signAlgorithm,proto3,enum=ca.SignAlgorithm" json:"signAlgorithm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReqSignCertificate) Reset()         { *m = ReqSignCertificate{} }
func (m *ReqSignCertificate) String() string { return proto.CompactTextString(m) }
func (*ReqSignCertificate) ProtoMessage()    {}
func (*ReqSignCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_42249d15fbfb5bb8, []int{4}
}

func (m *ReqSignCertificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSignCertificate.Unmarshal(m, b)
}
func (m *ReqSignCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSignCertificate.Marshal(b, m, deterministic)
}
func (m *ReqSignCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSignCertificate.Merge(m, src)
}
func (m *ReqSignCertificate) XXX_Size() int {
	return xxx_messageInfo_ReqSignCertificate.Size(m)
}
func (m *ReqSignCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSignCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSignCertificate proto.InternalMessageInfo

func (m *ReqSignCertificate) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *ReqSignCertificate) GetOrgDomain() string {
	if m != nil {
		return m.OrgDomain
	}
	return ""
}

func (m *ReqSignCertificate) GetChildName() string {
	if m != nil {
		return m.ChildName
	}
	return ""
}

func (m *ReqSignCertificate) GetIsUser() bool {
	if m != nil {
		return m.IsUser
	}
	return false
}

func (m *ReqSignCertificate) GetParentCertBytes() []byte {
	if m != nil {
		return m.ParentCertBytes
	}
	return nil
}

func (m *ReqSignCertificate) GetParentPriBytes() []byte {
	if m != nil {
		return m.ParentPriBytes
	}
	return nil
}

func (m *ReqSignCertificate) GetPubBytes() []byte {
	if m != nil {
		return m.PubBytes
	}
	return nil
}

func (m *ReqSignCertificate) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *ReqSignCertificate) GetSignAlgorithm() SignAlgorithm {
	if m != nil {
		return m.SignAlgorithm
	}
	return SignAlgorithm_SHA256WithRSA
}

// 生成组织下子节点/用户CA请求证书文件返回结构
type RespSignCertificate struct {
	// 请求返回结果：success=0；fail=1
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=ca.Code" json:"code,omitempty"`
	// 当且仅当返回码为1时，此处包含错误信息
	ErrMsg               string   `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	CertBytes            []byte   `protobuf:"bytes,4,opt,name=certBytes,proto3" json:"certBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespSignCertificate) Reset()         { *m = RespSignCertificate{} }
func (m *RespSignCertificate) String() string { return proto.CompactTextString(m) }
func (*RespSignCertificate) ProtoMessage()    {}
func (*RespSignCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_42249d15fbfb5bb8, []int{5}
}

func (m *RespSignCertificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RespSignCertificate.Unmarshal(m, b)
}
func (m *RespSignCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RespSignCertificate.Marshal(b, m, deterministic)
}
func (m *RespSignCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespSignCertificate.Merge(m, src)
}
func (m *RespSignCertificate) XXX_Size() int {
	return xxx_messageInfo_RespSignCertificate.Size(m)
}
func (m *RespSignCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_RespSignCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_RespSignCertificate proto.InternalMessageInfo

func (m *RespSignCertificate) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_Success
}

func (m *RespSignCertificate) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *RespSignCertificate) GetCertBytes() []byte {
	if m != nil {
		return m.CertBytes
	}
	return nil
}

// 生成csr请求证书转译pkix.Name
type Subject struct {
	// 国家代号，如CN
	Country              string   `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Province             string   `protobuf:"bytes,5,opt,name=province,proto3" json:"province,omitempty"`
	Locality             string   `protobuf:"bytes,6,opt,name=locality,proto3" json:"locality,omitempty"`
	OrgUnit              string   `protobuf:"bytes,7,opt,name=orgUnit,proto3" json:"orgUnit,omitempty"`
	StreetAddress        string   `protobuf:"bytes,8,opt,name=streetAddress,proto3" json:"streetAddress,omitempty"`
	PostalCode           string   `protobuf:"bytes,9,opt,name=postalCode,proto3" json:"postalCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subject) Reset()         { *m = Subject{} }
func (m *Subject) String() string { return proto.CompactTextString(m) }
func (*Subject) ProtoMessage()    {}
func (*Subject) Descriptor() ([]byte, []int) {
	return fileDescriptor_42249d15fbfb5bb8, []int{6}
}

func (m *Subject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subject.Unmarshal(m, b)
}
func (m *Subject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subject.Marshal(b, m, deterministic)
}
func (m *Subject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subject.Merge(m, src)
}
func (m *Subject) XXX_Size() int {
	return xxx_messageInfo_Subject.Size(m)
}
func (m *Subject) XXX_DiscardUnknown() {
	xxx_messageInfo_Subject.DiscardUnknown(m)
}

var xxx_messageInfo_Subject proto.InternalMessageInfo

func (m *Subject) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Subject) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *Subject) GetLocality() string {
	if m != nil {
		return m.Locality
	}
	return ""
}

func (m *Subject) GetOrgUnit() string {
	if m != nil {
		return m.OrgUnit
	}
	return ""
}

func (m *Subject) GetStreetAddress() string {
	if m != nil {
		return m.StreetAddress
	}
	return ""
}

func (m *Subject) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

// 密钥生成配置结构
type CryptoConfig struct {
	// 密钥生成类型：ECDSA=0；RSA=1
	CryptoType CryptoType `protobuf:"varint,1,opt,name=cryptoType,proto3,enum=ca.CryptoType" json:"cryptoType,omitempty"`
	// 密钥长度
	//
	// Types that are valid to be assigned to Algorithm:
	//	*CryptoConfig_EccAlgorithm
	//	*CryptoConfig_RsaAlgorithm
	Algorithm isCryptoConfig_Algorithm `protobuf_oneof:"Algorithm"`
	// 签名算法
	SignAlgorithm        SignAlgorithm `protobuf:"varint,5,opt,name=signAlgorithm,proto3,enum=ca.SignAlgorithm" json:"signAlgorithm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CryptoConfig) Reset()         { *m = CryptoConfig{} }
func (m *CryptoConfig) String() string { return proto.CompactTextString(m) }
func (*CryptoConfig) ProtoMessage()    {}
func (*CryptoConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_42249d15fbfb5bb8, []int{7}
}

func (m *CryptoConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptoConfig.Unmarshal(m, b)
}
func (m *CryptoConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptoConfig.Marshal(b, m, deterministic)
}
func (m *CryptoConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptoConfig.Merge(m, src)
}
func (m *CryptoConfig) XXX_Size() int {
	return xxx_messageInfo_CryptoConfig.Size(m)
}
func (m *CryptoConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptoConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CryptoConfig proto.InternalMessageInfo

func (m *CryptoConfig) GetCryptoType() CryptoType {
	if m != nil {
		return m.CryptoType
	}
	return CryptoType_ECDSA
}

type isCryptoConfig_Algorithm interface {
	isCryptoConfig_Algorithm()
}

type CryptoConfig_EccAlgorithm struct {
	EccAlgorithm EccAlgorithm `protobuf:"varint,2,opt,name=eccAlgorithm,proto3,enum=ca.EccAlgorithm,oneof"`
}

type CryptoConfig_RsaAlgorithm struct {
	RsaAlgorithm RsaAlgorithm `protobuf:"varint,3,opt,name=rsaAlgorithm,proto3,enum=ca.RsaAlgorithm,oneof"`
}

func (*CryptoConfig_EccAlgorithm) isCryptoConfig_Algorithm() {}

func (*CryptoConfig_RsaAlgorithm) isCryptoConfig_Algorithm() {}

func (m *CryptoConfig) GetAlgorithm() isCryptoConfig_Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

func (m *CryptoConfig) GetEccAlgorithm() EccAlgorithm {
	if x, ok := m.GetAlgorithm().(*CryptoConfig_EccAlgorithm); ok {
		return x.EccAlgorithm
	}
	return EccAlgorithm_p256
}

func (m *CryptoConfig) GetRsaAlgorithm() RsaAlgorithm {
	if x, ok := m.GetAlgorithm().(*CryptoConfig_RsaAlgorithm); ok {
		return x.RsaAlgorithm
	}
	return RsaAlgorithm_r2048
}

func (m *CryptoConfig) GetSignAlgorithm() SignAlgorithm {
	if m != nil {
		return m.SignAlgorithm
	}
	return SignAlgorithm_SHA256WithRSA
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoConfig_OneofMarshaler, _CryptoConfig_OneofUnmarshaler, _CryptoConfig_OneofSizer, []interface{}{
		(*CryptoConfig_EccAlgorithm)(nil),
		(*CryptoConfig_RsaAlgorithm)(nil),
	}
}

func _CryptoConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoConfig)
	// Algorithm
	switch x := m.Algorithm.(type) {
	case *CryptoConfig_EccAlgorithm:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.EccAlgorithm))
	case *CryptoConfig_RsaAlgorithm:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.RsaAlgorithm))
	case nil:
	default:
		return fmt.Errorf("CryptoConfig.Algorithm has unexpected type %T", x)
	}
	return nil
}

func _CryptoConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoConfig)
	switch tag {
	case 2: // Algorithm.eccAlgorithm
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Algorithm = &CryptoConfig_EccAlgorithm{EccAlgorithm(x)}
		return true, err
	case 3: // Algorithm.rsaAlgorithm
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Algorithm = &CryptoConfig_RsaAlgorithm{RsaAlgorithm(x)}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoConfig)
	// Algorithm
	switch x := m.Algorithm.(type) {
	case *CryptoConfig_EccAlgorithm:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.EccAlgorithm))
	case *CryptoConfig_RsaAlgorithm:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.RsaAlgorithm))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ReqRootCrypto)(nil), "ca.ReqRootCrypto")
	proto.RegisterType((*RespRootCrypto)(nil), "ca.RespRootCrypto")
	proto.RegisterType((*ReqCrypto)(nil), "ca.ReqCrypto")
	proto.RegisterType((*RespCrypto)(nil), "ca.RespCrypto")
	proto.RegisterType((*ReqSignCertificate)(nil), "ca.ReqSignCertificate")
	proto.RegisterType((*RespSignCertificate)(nil), "ca.RespSignCertificate")
	proto.RegisterType((*Subject)(nil), "ca.Subject")
	proto.RegisterType((*CryptoConfig)(nil), "ca.CryptoConfig")
}

func init() { proto.RegisterFile("grpc/proto/ca/cert.proto", fileDescriptor_42249d15fbfb5bb8) }

var fileDescriptor_42249d15fbfb5bb8 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0xfe, 0xa5, 0xeb, 0xda, 0xe6, 0xf4, 0xcf, 0x0f, 0x8c, 0x84, 0xc2, 0x34, 0xa1, 0x29, 0x62,
	0xa8, 0x37, 0x64, 0xd2, 0x10, 0x70, 0xbd, 0x0d, 0x24, 0x24, 0x04, 0x9a, 0x3c, 0x76, 0xc3, 0x5d,
	0xea, 0x7a, 0x99, 0x51, 0x1a, 0x67, 0xb6, 0x8b, 0xd4, 0x17, 0xe0, 0x29, 0x78, 0x13, 0x78, 0x08,
	0x1e, 0x86, 0x07, 0x40, 0x3e, 0x4e, 0x6b, 0xa7, 0x88, 0x09, 0x71, 0xc3, 0x5d, 0xbe, 0xef, 0x7c,
	0x47, 0xb6, 0xbf, 0xf3, 0x1d, 0x05, 0x92, 0x42, 0xd5, 0xec, 0xa8, 0x56, 0xd2, 0xc8, 0x23, 0x96,
	0x1f, 0x31, 0xae, 0x4c, 0x86, 0x88, 0x74, 0x58, 0xbe, 0xf7, 0xa0, 0x5d, 0xe5, 0xd5, 0x72, 0xa1,
	0x5d, 0x39, 0xfd, 0x16, 0xc1, 0x98, 0xf2, 0x1b, 0x2a, 0xa5, 0x39, 0x53, 0xab, 0xda, 0x48, 0x42,
	0xa0, 0x5b, 0xe5, 0x0b, 0x9e, 0x44, 0x07, 0xd1, 0x34, 0xa6, 0xf8, 0x4d, 0xee, 0x43, 0x6f, 0x2e,
	0x17, 0xb9, 0xa8, 0x92, 0x0e, 0xb2, 0x0d, 0x22, 0x87, 0xd0, 0xd7, 0xcb, 0xd9, 0x47, 0xce, 0x4c,
	0xb2, 0x73, 0x10, 0x4d, 0x87, 0xc7, 0xc3, 0x8c, 0xe5, 0xd9, 0x85, 0xa3, 0xe8, 0xba, 0x46, 0xa6,
	0xd0, 0x63, 0xb2, 0xba, 0x12, 0x45, 0xd2, 0x45, 0xd5, 0x1d, 0xab, 0x72, 0xc7, 0x9d, 0x21, 0x4f,
	0x9b, 0x3a, 0xc9, 0x20, 0x36, 0xa5, 0x76, 0x64, 0xb2, 0xfb, 0x1b, 0xb1, 0x97, 0xa4, 0x5f, 0x3a,
	0x30, 0xa1, 0x5c, 0xd7, 0xc1, 0xfd, 0xf7, 0xa1, 0xcb, 0xe4, 0xdc, 0xdd, 0x7f, 0x72, 0x3c, 0xc0,
	0x6e, 0x39, 0xe7, 0x14, 0x59, 0xfb, 0x12, 0xae, 0xd4, 0x5b, 0x5d, 0xac, 0x5f, 0xe2, 0x10, 0x39,
	0x80, 0x61, 0xad, 0xc4, 0x1b, 0xbe, 0x3a, 0x5d, 0x19, 0xae, 0xf1, 0x9e, 0x23, 0x1a, 0x52, 0xa8,
	0x58, 0xce, 0x36, 0x8a, 0xdd, 0x46, 0xe1, 0x29, 0xb2, 0x0f, 0xb1, 0x35, 0xde, 0xd5, 0x7b, 0x58,
	0xf7, 0x04, 0x79, 0x0c, 0x13, 0x53, 0xea, 0xf3, 0xe0, 0x90, 0x3e, 0x4a, 0xb6, 0xd8, 0xb5, 0x2e,
	0x38, 0x6a, 0xe0, 0x75, 0xc1, 0x69, 0x29, 0x8c, 0xac, 0x0f, 0x9b, 0x03, 0x63, 0x54, 0xb5, 0xb8,
	0xf4, 0x19, 0xc4, 0x94, 0xdf, 0x34, 0xc6, 0xf8, 0x29, 0x44, 0xb7, 0x4f, 0x21, 0xfd, 0x1c, 0x01,
	0x58, 0x57, 0xff, 0xb5, 0xa3, 0xe9, 0xf7, 0x0e, 0x10, 0xca, 0x6f, 0x2e, 0x44, 0x51, 0xd9, 0x47,
	0x89, 0x2b, 0xc1, 0x72, 0xc3, 0x49, 0x02, 0x7d, 0xa9, 0x8a, 0x77, 0x3e, 0xa5, 0x6b, 0x68, 0x47,
	0x20, 0x55, 0xf1, 0x32, 0xcc, 0xaa, 0x27, 0x70, 0x40, 0xd7, 0xa2, 0x9c, 0x63, 0xe7, 0x8e, 0xab,
	0x6e, 0x08, 0xfb, 0x10, 0xa1, 0x2f, 0x35, 0x57, 0x78, 0xd7, 0x01, 0x6d, 0x10, 0x99, 0xc2, 0xff,
	0x75, 0xae, 0x78, 0x65, 0xbc, 0xd7, 0xee, 0xaa, 0xdb, 0xb4, 0x1d, 0x9d, 0xa3, 0xce, 0x95, 0x08,
	0x53, 0xb0, 0xc5, 0x92, 0x3d, 0x18, 0xd4, 0xcb, 0x59, 0x18, 0x82, 0x0d, 0x0e, 0x57, 0x6a, 0x70,
	0xcb, 0x4a, 0xbd, 0x80, 0xb1, 0x16, 0x45, 0x75, 0x52, 0x16, 0x52, 0x09, 0x73, 0xbd, 0xc0, 0xf1,
	0x4f, 0x8e, 0xef, 0xa2, 0x38, 0x2c, 0xd0, 0xb6, 0x2e, 0x15, 0x70, 0xcf, 0x8e, 0x76, 0xdb, 0xd2,
	0xbf, 0x9b, 0x71, 0x2b, 0xf1, 0xdd, 0xad, 0xc4, 0xa7, 0x5f, 0x23, 0xe8, 0x37, 0x17, 0xb7, 0x23,
	0x63, 0x72, 0x59, 0x19, 0xb5, 0x42, 0x5d, 0x4c, 0xd7, 0x10, 0xcd, 0x50, 0xf2, 0x93, 0xa8, 0x18,
	0x47, 0x5f, 0x63, 0xba, 0xc1, 0xb6, 0x56, 0x4a, 0x96, 0x97, 0xc2, 0xac, 0xd0, 0xca, 0x98, 0x6e,
	0x70, 0x13, 0x82, 0xcb, 0x4a, 0x18, 0xf4, 0xd0, 0x85, 0xc0, 0x42, 0xf2, 0x08, 0xc6, 0xda, 0x28,
	0xce, 0xcd, 0xc9, 0x7c, 0xae, 0xb8, 0x76, 0x0b, 0x14, 0xd3, 0x36, 0x49, 0x1e, 0x02, 0xd4, 0x52,
	0x9b, 0xbc, 0xb4, 0xef, 0x44, 0xfb, 0x62, 0x1a, 0x30, 0xe9, 0x8f, 0x08, 0x46, 0xe1, 0x76, 0x90,
	0x0c, 0x80, 0x21, 0x7e, 0xbf, 0xaa, 0xd7, 0x46, 0x4d, 0xfc, 0x0e, 0x59, 0x96, 0x06, 0x0a, 0xf2,
	0x1c, 0x46, 0x9c, 0x31, 0x3f, 0xa1, 0x0e, 0x76, 0xe0, 0xd6, 0xbd, 0x0a, 0xf8, 0xd7, 0xff, 0xd1,
	0x96, 0xce, 0xf6, 0x29, 0x9d, 0xfb, 0xbe, 0x1d, 0xdf, 0x47, 0x03, 0xde, 0xf6, 0x85, 0xba, 0x5f,
	0x23, 0xb1, 0xfb, 0x67, 0x91, 0x38, 0x1d, 0x42, 0xec, 0xc1, 0x09, 0x1c, 0xb2, 0x2a, 0xcb, 0x67,
	0x5c, 0x09, 0x96, 0x5d, 0xe5, 0x33, 0x25, 0xd8, 0x13, 0x56, 0x0a, 0x5e, 0x99, 0xcc, 0xfe, 0x45,
	0xdc, 0x6f, 0x23, 0x63, 0xf9, 0x69, 0x6c, 0xe3, 0x73, 0x6e, 0xd1, 0x87, 0x71, 0xeb, 0xff, 0x32,
	0xeb, 0xe1, 0xd7, 0xd3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xc2, 0xcb, 0x20, 0x95, 0x06,
	0x00, 0x00,
}
