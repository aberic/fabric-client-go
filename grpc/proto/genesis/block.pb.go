// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/proto/genesis/block.proto

package genesis

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqGenesis struct {
	// 联盟部署信息
	League *LeagueInBlock `protobuf:"bytes,1,opt,name=league,proto3" json:"league,omitempty"`
	// 联盟下组织机构信息
	Orgs                 []*OrgInBlock `protobuf:"bytes,2,rep,name=orgs,proto3" json:"orgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReqGenesis) Reset()         { *m = ReqGenesis{} }
func (m *ReqGenesis) String() string { return proto.CompactTextString(m) }
func (*ReqGenesis) ProtoMessage()    {}
func (*ReqGenesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbc2330b31a54f8, []int{0}
}

func (m *ReqGenesis) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqGenesis.Unmarshal(m, b)
}
func (m *ReqGenesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqGenesis.Marshal(b, m, deterministic)
}
func (m *ReqGenesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGenesis.Merge(m, src)
}
func (m *ReqGenesis) XXX_Size() int {
	return xxx_messageInfo_ReqGenesis.Size(m)
}
func (m *ReqGenesis) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGenesis.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGenesis proto.InternalMessageInfo

func (m *ReqGenesis) GetLeague() *LeagueInBlock {
	if m != nil {
		return m.League
	}
	return nil
}

func (m *ReqGenesis) GetOrgs() []*OrgInBlock {
	if m != nil {
		return m.Orgs
	}
	return nil
}

type RespGenesis struct {
	Code                 Code     `protobuf:"varint,1,opt,name=code,proto3,enum=genesis.Code" json:"code,omitempty"`
	ErrMsg               string   `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespGenesis) Reset()         { *m = RespGenesis{} }
func (m *RespGenesis) String() string { return proto.CompactTextString(m) }
func (*RespGenesis) ProtoMessage()    {}
func (*RespGenesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbc2330b31a54f8, []int{1}
}

func (m *RespGenesis) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RespGenesis.Unmarshal(m, b)
}
func (m *RespGenesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RespGenesis.Marshal(b, m, deterministic)
}
func (m *RespGenesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespGenesis.Merge(m, src)
}
func (m *RespGenesis) XXX_Size() int {
	return xxx_messageInfo_RespGenesis.Size(m)
}
func (m *RespGenesis) XXX_DiscardUnknown() {
	xxx_messageInfo_RespGenesis.DiscardUnknown(m)
}

var xxx_messageInfo_RespGenesis proto.InternalMessageInfo

func (m *RespGenesis) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_Success
}

func (m *RespGenesis) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ReqChannelTx struct {
	ChannelID            string      `protobuf:"bytes,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	Genesis              *ReqGenesis `protobuf:"bytes,2,opt,name=genesis,proto3" json:"genesis,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReqChannelTx) Reset()         { *m = ReqChannelTx{} }
func (m *ReqChannelTx) String() string { return proto.CompactTextString(m) }
func (*ReqChannelTx) ProtoMessage()    {}
func (*ReqChannelTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbc2330b31a54f8, []int{2}
}

func (m *ReqChannelTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqChannelTx.Unmarshal(m, b)
}
func (m *ReqChannelTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqChannelTx.Marshal(b, m, deterministic)
}
func (m *ReqChannelTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqChannelTx.Merge(m, src)
}
func (m *ReqChannelTx) XXX_Size() int {
	return xxx_messageInfo_ReqChannelTx.Size(m)
}
func (m *ReqChannelTx) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqChannelTx.DiscardUnknown(m)
}

var xxx_messageInfo_ReqChannelTx proto.InternalMessageInfo

func (m *ReqChannelTx) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *ReqChannelTx) GetGenesis() *ReqGenesis {
	if m != nil {
		return m.Genesis
	}
	return nil
}

type RespChannelTx struct {
	Code                 Code     `protobuf:"varint,1,opt,name=code,proto3,enum=genesis.Code" json:"code,omitempty"`
	ErrMsg               string   `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespChannelTx) Reset()         { *m = RespChannelTx{} }
func (m *RespChannelTx) String() string { return proto.CompactTextString(m) }
func (*RespChannelTx) ProtoMessage()    {}
func (*RespChannelTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbc2330b31a54f8, []int{3}
}

func (m *RespChannelTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RespChannelTx.Unmarshal(m, b)
}
func (m *RespChannelTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RespChannelTx.Marshal(b, m, deterministic)
}
func (m *RespChannelTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespChannelTx.Merge(m, src)
}
func (m *RespChannelTx) XXX_Size() int {
	return xxx_messageInfo_RespChannelTx.Size(m)
}
func (m *RespChannelTx) XXX_DiscardUnknown() {
	xxx_messageInfo_RespChannelTx.DiscardUnknown(m)
}

var xxx_messageInfo_RespChannelTx proto.InternalMessageInfo

func (m *RespChannelTx) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_Success
}

func (m *RespChannelTx) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

// 联盟部署信息
type LeagueInBlock struct {
	Version Version `protobuf:"varint,1,opt,name=version,proto3,enum=genesis.Version" json:"version,omitempty"`
	// 联盟主域名
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// 地址过去是client和peer可以连接的orderer地址列表
	//
	// 但是，这并不允许client关联orderer地址和orderer组织，这对于诸如TLS验证之类的事情是非常有用的
	//
	// 指定orderer地址的首选方法是现在在您的org定义中包含ordererendpoint项
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// 批处理超时:创建批处理之前等待的时间量
	BatchTimeout int64 `protobuf:"varint,4,opt,name=BatchTimeout,proto3" json:"BatchTimeout,omitempty"`
	// 批处理大小:控制成批处理到一个块中的消息的数量
	BatchSize *BatchSize `protobuf:"bytes,5,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	// EtcdRaft定义了在选择“EtcdRaft”orderertype时必须设置的配置
	EtcdRaft *EtcdRaft `protobuf:"bytes,6,opt,name=etcdRaft,proto3" json:"etcdRaft,omitempty"`
	// 最大通道是orderer网络上允许的最大通道数。当设置为0时，这意味着没有最大通道数
	MaxChannels          uint64   `protobuf:"varint,7,opt,name=MaxChannels,proto3" json:"MaxChannels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeagueInBlock) Reset()         { *m = LeagueInBlock{} }
func (m *LeagueInBlock) String() string { return proto.CompactTextString(m) }
func (*LeagueInBlock) ProtoMessage()    {}
func (*LeagueInBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbc2330b31a54f8, []int{4}
}

func (m *LeagueInBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeagueInBlock.Unmarshal(m, b)
}
func (m *LeagueInBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeagueInBlock.Marshal(b, m, deterministic)
}
func (m *LeagueInBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeagueInBlock.Merge(m, src)
}
func (m *LeagueInBlock) XXX_Size() int {
	return xxx_messageInfo_LeagueInBlock.Size(m)
}
func (m *LeagueInBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_LeagueInBlock.DiscardUnknown(m)
}

var xxx_messageInfo_LeagueInBlock proto.InternalMessageInfo

func (m *LeagueInBlock) GetVersion() Version {
	if m != nil {
		return m.Version
	}
	return Version_V1_4_4
}

func (m *LeagueInBlock) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *LeagueInBlock) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *LeagueInBlock) GetBatchTimeout() int64 {
	if m != nil {
		return m.BatchTimeout
	}
	return 0
}

func (m *LeagueInBlock) GetBatchSize() *BatchSize {
	if m != nil {
		return m.BatchSize
	}
	return nil
}

func (m *LeagueInBlock) GetEtcdRaft() *EtcdRaft {
	if m != nil {
		return m.EtcdRaft
	}
	return nil
}

func (m *LeagueInBlock) GetMaxChannels() uint64 {
	if m != nil {
		return m.MaxChannels
	}
	return 0
}

// 批处理大小:控制成批处理到一个块中的消息的数量
//
// orderer不透明地查看消息，但是通常，消息可能被认为是Fabric事务
//
// “批处理”是块的“数据”字段中的一组消息。当应用签名、散列和其他元数据时，块将比批处理大小大几kb
type BatchSize struct {
	// 最大消息数:批处理中允许的最大消息数。没有一个块包含超过这个数量的消息
	MaxMessageCount uint32 `protobuf:"varint,1,opt,name=maxMessageCount,proto3" json:"maxMessageCount,omitempty"`
	// 绝对最大字节数:批处理中允许的序列化消息的绝对最大字节数
	//
	// 最大块大小是这个值加上相关元数据的大小(通常是几个KB，这取决于签名标识的大小)
	//
	// 任何大于此值的事务将被orderer拒绝
	//
	// 如果选择了“kafka”OrdererType，则设置“message.max”。字节数”和“replica.fetch.max。在Kafka代理上设置一个比这个更大的值
	AbsoluteMaxBytes uint32 `protobuf:"varint,2,opt,name=absoluteMaxBytes,proto3" json:"absoluteMaxBytes,omitempty"`
	// 首选最大字节:批处理中序列化消息所允许的首选最大字节数
	//
	// 大致上，这个字段可以被认为是批处理的最大努力
	//
	// 批处理将填充消息，直到达到这个大小(或超过最大消息数，或超过批处理超时)
	//
	// 如果向批处理添加新消息会导致批处理超过首选的最大字节，那么将关闭当前批处理并将其写入一个块，并创建一个包含新消息的新批处理
	//
	// 如果接收到的消息大于首选的最大字节，则其批处理将仅包含该消息
	//
	// 因为消息可能大于首选的最大字节(直到AbsoluteMaxBytes)，所以某些批可能超过首选的最大字节，但始终只包含一个事务
	PreferredMaxBytes    uint32   `protobuf:"varint,3,opt,name=preferredMaxBytes,proto3" json:"preferredMaxBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchSize) Reset()         { *m = BatchSize{} }
func (m *BatchSize) String() string { return proto.CompactTextString(m) }
func (*BatchSize) ProtoMessage()    {}
func (*BatchSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbc2330b31a54f8, []int{5}
}

func (m *BatchSize) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchSize.Unmarshal(m, b)
}
func (m *BatchSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchSize.Marshal(b, m, deterministic)
}
func (m *BatchSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchSize.Merge(m, src)
}
func (m *BatchSize) XXX_Size() int {
	return xxx_messageInfo_BatchSize.Size(m)
}
func (m *BatchSize) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchSize.DiscardUnknown(m)
}

var xxx_messageInfo_BatchSize proto.InternalMessageInfo

func (m *BatchSize) GetMaxMessageCount() uint32 {
	if m != nil {
		return m.MaxMessageCount
	}
	return 0
}

func (m *BatchSize) GetAbsoluteMaxBytes() uint32 {
	if m != nil {
		return m.AbsoluteMaxBytes
	}
	return 0
}

func (m *BatchSize) GetPreferredMaxBytes() uint32 {
	if m != nil {
		return m.PreferredMaxBytes
	}
	return 0
}

// EtcdRaft定义了在选择“EtcdRaft”orderertype时必须设置的配置
type EtcdRaft struct {
	// 这个网络的一组raft副本
	//
	// 对于基于etcd/raft的实现，fabric网络中每个副本都是一个OSN
	//
	// 因此，此列表中枚举的host:port项的一个子集应该在Orderer.Addresses下复制
	Consenters []*Consenter `protobuf:"bytes,1,rep,name=consenters,proto3" json:"consenters,omitempty"`
	// 为所有etcd/raft节点指定的选项。这里的值是所有新通道的默认值，可以通过配置更新对每个通道进行修改
	Options              *Options `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EtcdRaft) Reset()         { *m = EtcdRaft{} }
func (m *EtcdRaft) String() string { return proto.CompactTextString(m) }
func (*EtcdRaft) ProtoMessage()    {}
func (*EtcdRaft) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbc2330b31a54f8, []int{6}
}

func (m *EtcdRaft) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EtcdRaft.Unmarshal(m, b)
}
func (m *EtcdRaft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EtcdRaft.Marshal(b, m, deterministic)
}
func (m *EtcdRaft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EtcdRaft.Merge(m, src)
}
func (m *EtcdRaft) XXX_Size() int {
	return xxx_messageInfo_EtcdRaft.Size(m)
}
func (m *EtcdRaft) XXX_DiscardUnknown() {
	xxx_messageInfo_EtcdRaft.DiscardUnknown(m)
}

var xxx_messageInfo_EtcdRaft proto.InternalMessageInfo

func (m *EtcdRaft) GetConsenters() []*Consenter {
	if m != nil {
		return m.Consenters
	}
	return nil
}

func (m *EtcdRaft) GetOptions() *Options {
	if m != nil {
		return m.Options
	}
	return nil
}

// fabric网络中基于raft的orderer单个节点信息
type Consenter struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	ClientTlsCert        []byte   `protobuf:"bytes,3,opt,name=clientTlsCert,proto3" json:"clientTlsCert,omitempty"`
	ServerTlsCert        []byte   `protobuf:"bytes,4,opt,name=serverTlsCert,proto3" json:"serverTlsCert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Consenter) Reset()         { *m = Consenter{} }
func (m *Consenter) String() string { return proto.CompactTextString(m) }
func (*Consenter) ProtoMessage()    {}
func (*Consenter) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbc2330b31a54f8, []int{7}
}

func (m *Consenter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Consenter.Unmarshal(m, b)
}
func (m *Consenter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Consenter.Marshal(b, m, deterministic)
}
func (m *Consenter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consenter.Merge(m, src)
}
func (m *Consenter) XXX_Size() int {
	return xxx_messageInfo_Consenter.Size(m)
}
func (m *Consenter) XXX_DiscardUnknown() {
	xxx_messageInfo_Consenter.DiscardUnknown(m)
}

var xxx_messageInfo_Consenter proto.InternalMessageInfo

func (m *Consenter) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Consenter) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Consenter) GetClientTlsCert() []byte {
	if m != nil {
		return m.ClientTlsCert
	}
	return nil
}

func (m *Consenter) GetServerTlsCert() []byte {
	if m != nil {
		return m.ServerTlsCert
	}
	return nil
}

// 为所有etcd/raft节点指定的选项。这里的值是所有新通道的默认值，可以通过配置更新对每个通道进行修改
type Options struct {
	// TickInterval是两个节点之间的时间间隔
	TickInterval string `protobuf:"bytes,1,opt,name=TickInterval,proto3" json:"TickInterval,omitempty"`
	// ElectionTick是节点的数量
	//
	// 在两次选举之间必须通过的调用。也就是说，如果一个追随者在选举结束前没有收到任何现任领导人的信息，他将成为候选人并开始选举
	//
	// 选举的节奏必须比心跳的节奏快
	ElectionTick uint32 `protobuf:"varint,2,opt,name=ElectionTick,proto3" json:"ElectionTick,omitempty"`
	// 心跳次数是心跳之间必须传递的节点次数。也就是说，领导者在每一次心跳时都发送心跳信息以保持其领导力
	HeartbeatTick uint32 `protobuf:"varint,3,opt,name=HeartbeatTick,proto3" json:"HeartbeatTick,omitempty"`
	// MaxInflightBlocks在乐观复制阶段限制动态附加消息的最大数量
	MaxInflightBlocks uint32 `protobuf:"varint,4,opt,name=MaxInflightBlocks,proto3" json:"MaxInflightBlocks,omitempty"`
	// SnapshotIntervalSize定义每个快照的字节数
	SnapshotIntervalSize uint32   `protobuf:"varint,5,opt,name=SnapshotIntervalSize,proto3" json:"SnapshotIntervalSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Options) Reset()         { *m = Options{} }
func (m *Options) String() string { return proto.CompactTextString(m) }
func (*Options) ProtoMessage()    {}
func (*Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbc2330b31a54f8, []int{8}
}

func (m *Options) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Options.Unmarshal(m, b)
}
func (m *Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Options.Marshal(b, m, deterministic)
}
func (m *Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Options.Merge(m, src)
}
func (m *Options) XXX_Size() int {
	return xxx_messageInfo_Options.Size(m)
}
func (m *Options) XXX_DiscardUnknown() {
	xxx_messageInfo_Options.DiscardUnknown(m)
}

var xxx_messageInfo_Options proto.InternalMessageInfo

func (m *Options) GetTickInterval() string {
	if m != nil {
		return m.TickInterval
	}
	return ""
}

func (m *Options) GetElectionTick() uint32 {
	if m != nil {
		return m.ElectionTick
	}
	return 0
}

func (m *Options) GetHeartbeatTick() uint32 {
	if m != nil {
		return m.HeartbeatTick
	}
	return 0
}

func (m *Options) GetMaxInflightBlocks() uint32 {
	if m != nil {
		return m.MaxInflightBlocks
	}
	return 0
}

func (m *Options) GetSnapshotIntervalSize() uint32 {
	if m != nil {
		return m.SnapshotIntervalSize
	}
	return 0
}

// ReqOrderers 请求生成指定联盟默认orderer服务集合
type OrgInBlock struct {
	// 组织主域名
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// 组织名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// ordererendpoint是这个组织运行的所有orderers的列表
	//
	// client和peer可以分别连接到这些orderers来推动事务和接收块，如：127.0.0.1:7050
	OrdererEndpoints []string `protobuf:"bytes,4,rep,name=ordererEndpoints,proto3" json:"ordererEndpoints,omitempty"`
	// 组织类型
	Type OrgType `protobuf:"varint,5,opt,name=type,proto3,enum=genesis.OrgType" json:"type,omitempty"`
	// 组织证书信息
	Cert *MspCert `protobuf:"bytes,6,opt,name=cert,proto3" json:"cert,omitempty"`
	// 锚节点定义了节点的位置，这些节点可用于跨组织的gossip通信。注意，这个值只在应用程序部分上下文的genesis块中编码
	AnchorPeers          []*AnchorPeer `protobuf:"bytes,7,rep,name=anchorPeers,proto3" json:"anchorPeers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OrgInBlock) Reset()         { *m = OrgInBlock{} }
func (m *OrgInBlock) String() string { return proto.CompactTextString(m) }
func (*OrgInBlock) ProtoMessage()    {}
func (*OrgInBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbc2330b31a54f8, []int{9}
}

func (m *OrgInBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrgInBlock.Unmarshal(m, b)
}
func (m *OrgInBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrgInBlock.Marshal(b, m, deterministic)
}
func (m *OrgInBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrgInBlock.Merge(m, src)
}
func (m *OrgInBlock) XXX_Size() int {
	return xxx_messageInfo_OrgInBlock.Size(m)
}
func (m *OrgInBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_OrgInBlock.DiscardUnknown(m)
}

var xxx_messageInfo_OrgInBlock proto.InternalMessageInfo

func (m *OrgInBlock) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *OrgInBlock) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OrgInBlock) GetOrdererEndpoints() []string {
	if m != nil {
		return m.OrdererEndpoints
	}
	return nil
}

func (m *OrgInBlock) GetType() OrgType {
	if m != nil {
		return m.Type
	}
	return OrgType_Order
}

func (m *OrgInBlock) GetCert() *MspCert {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *OrgInBlock) GetAnchorPeers() []*AnchorPeer {
	if m != nil {
		return m.AnchorPeers
	}
	return nil
}

// 组织证书信息
type MspCert struct {
	// 组织管理员证书
	AdminCert []byte `protobuf:"bytes,1,opt,name=adminCert,proto3" json:"adminCert,omitempty"`
	// 组织根证书
	CaCert []byte `protobuf:"bytes,2,opt,name=caCert,proto3" json:"caCert,omitempty"`
	// 组织tls根证书
	TlsCaCert            []byte   `protobuf:"bytes,3,opt,name=tlsCaCert,proto3" json:"tlsCaCert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MspCert) Reset()         { *m = MspCert{} }
func (m *MspCert) String() string { return proto.CompactTextString(m) }
func (*MspCert) ProtoMessage()    {}
func (*MspCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbc2330b31a54f8, []int{10}
}

func (m *MspCert) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MspCert.Unmarshal(m, b)
}
func (m *MspCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MspCert.Marshal(b, m, deterministic)
}
func (m *MspCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MspCert.Merge(m, src)
}
func (m *MspCert) XXX_Size() int {
	return xxx_messageInfo_MspCert.Size(m)
}
func (m *MspCert) XXX_DiscardUnknown() {
	xxx_messageInfo_MspCert.DiscardUnknown(m)
}

var xxx_messageInfo_MspCert proto.InternalMessageInfo

func (m *MspCert) GetAdminCert() []byte {
	if m != nil {
		return m.AdminCert
	}
	return nil
}

func (m *MspCert) GetCaCert() []byte {
	if m != nil {
		return m.CaCert
	}
	return nil
}

func (m *MspCert) GetTlsCaCert() []byte {
	if m != nil {
		return m.TlsCaCert
	}
	return nil
}

// 锚节点定义了节点的位置，这些节点可用于跨组织的gossip通信。注意，这个值只在应用程序部分上下文的genesis块中编码
type AnchorPeer struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorPeer) Reset()         { *m = AnchorPeer{} }
func (m *AnchorPeer) String() string { return proto.CompactTextString(m) }
func (*AnchorPeer) ProtoMessage()    {}
func (*AnchorPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dbc2330b31a54f8, []int{11}
}

func (m *AnchorPeer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnchorPeer.Unmarshal(m, b)
}
func (m *AnchorPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnchorPeer.Marshal(b, m, deterministic)
}
func (m *AnchorPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorPeer.Merge(m, src)
}
func (m *AnchorPeer) XXX_Size() int {
	return xxx_messageInfo_AnchorPeer.Size(m)
}
func (m *AnchorPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorPeer.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorPeer proto.InternalMessageInfo

func (m *AnchorPeer) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AnchorPeer) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*ReqGenesis)(nil), "genesis.ReqGenesis")
	proto.RegisterType((*RespGenesis)(nil), "genesis.RespGenesis")
	proto.RegisterType((*ReqChannelTx)(nil), "genesis.ReqChannelTx")
	proto.RegisterType((*RespChannelTx)(nil), "genesis.RespChannelTx")
	proto.RegisterType((*LeagueInBlock)(nil), "genesis.LeagueInBlock")
	proto.RegisterType((*BatchSize)(nil), "genesis.BatchSize")
	proto.RegisterType((*EtcdRaft)(nil), "genesis.EtcdRaft")
	proto.RegisterType((*Consenter)(nil), "genesis.Consenter")
	proto.RegisterType((*Options)(nil), "genesis.Options")
	proto.RegisterType((*OrgInBlock)(nil), "genesis.OrgInBlock")
	proto.RegisterType((*MspCert)(nil), "genesis.MspCert")
	proto.RegisterType((*AnchorPeer)(nil), "genesis.AnchorPeer")
}

func init() { proto.RegisterFile("grpc/proto/genesis/block.proto", fileDescriptor_6dbc2330b31a54f8) }

var fileDescriptor_6dbc2330b31a54f8 = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdd, 0x8e, 0xe3, 0x34,
	0x14, 0x56, 0xa6, 0xd9, 0x76, 0x7b, 0xda, 0xc0, 0xae, 0x41, 0xab, 0x08, 0x21, 0x54, 0xa2, 0x95,
	0xa8, 0x46, 0x4c, 0x07, 0x15, 0x78, 0x00, 0x5a, 0x46, 0x6c, 0x11, 0x65, 0x56, 0xde, 0x8a, 0x0b,
	0x10, 0x17, 0xae, 0x73, 0x9a, 0x86, 0x4d, 0xed, 0xac, 0xed, 0x8e, 0x3a, 0xdc, 0xf0, 0x08, 0xdc,
	0xf2, 0x6a, 0x3c, 0x01, 0xaf, 0x81, 0xec, 0x38, 0x49, 0x3b, 0x5d, 0xc4, 0xc5, 0xde, 0xc5, 0xdf,
	0xf7, 0xf9, 0xf8, 0x3b, 0x3f, 0x76, 0xe0, 0x93, 0x4c, 0x95, 0xfc, 0xba, 0x54, 0xd2, 0xc8, 0xeb,
	0x0c, 0x05, 0xea, 0x5c, 0x5f, 0xaf, 0x0b, 0xc9, 0x5f, 0x4f, 0x1c, 0x46, 0x7a, 0x1e, 0xfc, 0xe8,
	0x6d, 0x42, 0x14, 0xfb, 0x9d, 0xae, 0x84, 0x09, 0x02, 0x50, 0x7c, 0xf3, 0x5d, 0xc5, 0x90, 0x09,
	0x74, 0x0b, 0x64, 0xd9, 0x1e, 0xe3, 0x60, 0x14, 0x8c, 0x07, 0xd3, 0x67, 0x13, 0xbf, 0x67, 0xf2,
	0x83, 0x83, 0x17, 0x62, 0x66, 0x0f, 0xa1, 0x5e, 0x45, 0x3e, 0x83, 0x50, 0xaa, 0x4c, 0xc7, 0x17,
	0xa3, 0xce, 0x78, 0x30, 0xfd, 0xa0, 0x51, 0xdf, 0xaa, 0xac, 0x96, 0x3a, 0x41, 0xf2, 0x02, 0x06,
	0x14, 0x75, 0x59, 0x9f, 0xf3, 0x29, 0x84, 0x5c, 0xa6, 0xd5, 0x29, 0xef, 0x4d, 0xa3, 0x66, 0xdf,
	0x5c, 0xa6, 0x48, 0x1d, 0x45, 0x9e, 0x41, 0x17, 0x95, 0x5a, 0xea, 0x2c, 0xbe, 0x18, 0x05, 0xe3,
	0x3e, 0xf5, 0xab, 0xe4, 0x17, 0x18, 0x52, 0x7c, 0x33, 0xdf, 0x32, 0x21, 0xb0, 0x58, 0x1d, 0xc8,
	0xc7, 0xd0, 0xe7, 0xd5, 0x62, 0xf1, 0xad, 0x8b, 0xd7, 0xa7, 0x2d, 0x40, 0xae, 0xa0, 0xae, 0x84,
	0x0b, 0x73, 0xec, 0xb1, 0x4d, 0x9b, 0xd6, 0x9a, 0xe4, 0x7b, 0x88, 0xac, 0xcd, 0x36, 0xfa, 0x3b,
	0x18, 0xfd, 0xeb, 0x02, 0xa2, 0x93, 0xaa, 0x91, 0x4b, 0xe8, 0xdd, 0xa1, 0xd2, 0xb9, 0x14, 0x3e,
	0xde, 0x93, 0x26, 0xde, 0x4f, 0x15, 0x4e, 0x6b, 0x81, 0x8d, 0x9a, 0xca, 0x1d, 0xcb, 0x45, 0x1d,
	0xb5, 0x5a, 0xd9, 0x74, 0x59, 0x9a, 0x2a, 0xd4, 0x1a, 0x75, 0xdc, 0x19, 0x75, 0x6c, 0xba, 0x0d,
	0x40, 0x12, 0x18, 0xce, 0x98, 0xe1, 0xdb, 0x55, 0xbe, 0x43, 0xb9, 0x37, 0x71, 0x38, 0x0a, 0xc6,
	0x1d, 0x7a, 0x82, 0x91, 0x2f, 0xa0, 0xbf, 0xb6, 0xeb, 0x57, 0xf9, 0xef, 0x18, 0x3f, 0x72, 0x45,
	0x21, 0x8d, 0x8f, 0x59, 0xcd, 0xd0, 0x56, 0x44, 0xae, 0xe0, 0x31, 0x1a, 0x9e, 0x52, 0xb6, 0x31,
	0x71, 0xd7, 0x6d, 0x78, 0xda, 0x6c, 0xb8, 0xf1, 0x04, 0x6d, 0x24, 0x64, 0x04, 0x83, 0x25, 0x3b,
	0xf8, 0x1a, 0xea, 0xb8, 0x37, 0x0a, 0xc6, 0x21, 0x3d, 0x86, 0x92, 0x3f, 0x03, 0xe8, 0x37, 0x27,
	0x91, 0x31, 0xbc, 0xbf, 0x63, 0x87, 0x25, 0x6a, 0xcd, 0x32, 0x9c, 0xcb, 0xbd, 0x30, 0xae, 0x3c,
	0x11, 0x7d, 0x08, 0x93, 0x4b, 0x78, 0xc2, 0xd6, 0x5a, 0x16, 0x7b, 0x83, 0x4b, 0x76, 0x98, 0xdd,
	0x1b, 0xac, 0xda, 0x1a, 0xd1, 0x33, 0x9c, 0x7c, 0x0e, 0x4f, 0x4b, 0x85, 0x1b, 0x54, 0x0a, 0xd3,
	0x46, 0xdc, 0x71, 0xe2, 0x73, 0x22, 0xf9, 0x0d, 0x1e, 0xd7, 0x99, 0x90, 0x29, 0x00, 0x97, 0x42,
	0xa3, 0x30, 0xa8, 0x74, 0x1c, 0xb8, 0xd1, 0x26, 0x47, 0x9d, 0xf7, 0x14, 0x3d, 0x52, 0xd9, 0xd6,
	0xca, 0xd2, 0xe4, 0x52, 0xd4, 0x73, 0xd6, 0xb6, 0xf6, 0xb6, 0xc2, 0x69, 0x2d, 0x48, 0xfe, 0x80,
	0x7e, 0x13, 0x84, 0x10, 0x08, 0xb7, 0x52, 0x1b, 0x3f, 0xb9, 0xee, 0xdb, 0x62, 0xa5, 0x54, 0xc6,
	0xa7, 0xe6, 0xbe, 0xc9, 0x73, 0x88, 0x78, 0x91, 0xa3, 0x30, 0xab, 0x42, 0xcf, 0x51, 0x19, 0x97,
	0xca, 0x90, 0x9e, 0x82, 0x56, 0xa5, 0x51, 0xdd, 0xa1, 0xaa, 0x55, 0x61, 0xa5, 0x3a, 0x01, 0x93,
	0xbf, 0x03, 0xe8, 0x79, 0x57, 0x76, 0x62, 0x56, 0x39, 0x7f, 0xbd, 0xb0, 0x66, 0xee, 0x58, 0xe1,
	0x7d, 0x9c, 0x60, 0x56, 0x73, 0x53, 0x20, 0xb7, 0x1b, 0x2c, 0xee, 0x7d, 0x9d, 0x60, 0xf6, 0xe4,
	0x17, 0xc8, 0x94, 0x59, 0x23, 0x33, 0x4e, 0x54, 0x95, 0xfa, 0x14, 0xb4, 0x4d, 0x59, 0xb2, 0xc3,
	0x42, 0x6c, 0x8a, 0x3c, 0xdb, 0x1a, 0x77, 0x2b, 0xb4, 0xf3, 0x18, 0xd1, 0x73, 0x82, 0x4c, 0xe1,
	0xc3, 0x57, 0x82, 0x95, 0x7a, 0x2b, 0x4d, 0xed, 0xa5, 0x19, 0xda, 0x88, 0xbe, 0x95, 0x4b, 0xfe,
	0x09, 0x00, 0xda, 0xd7, 0xe7, 0x3f, 0xaf, 0x11, 0x81, 0x50, 0xb0, 0x1d, 0x3a, 0x97, 0x7d, 0xea,
	0xbe, 0xed, 0x74, 0x49, 0x95, 0xa2, 0x42, 0x75, 0x23, 0xd2, 0x52, 0xe6, 0xc2, 0x58, 0x6f, 0xf6,
	0x86, 0x9d, 0xe1, 0xe4, 0x39, 0x84, 0xe6, 0xbe, 0xac, 0xac, 0x1c, 0xdf, 0xe3, 0x5b, 0x95, 0xad,
	0xee, 0x4b, 0xa4, 0x8e, 0xb5, 0x2a, 0x6e, 0xbb, 0xd0, 0x7d, 0x30, 0x12, 0x4b, 0x5d, 0xda, 0x46,
	0x50, 0xc7, 0x92, 0xaf, 0x61, 0xc0, 0x04, 0xdf, 0x4a, 0xf5, 0x12, 0xed, 0xc0, 0xf5, 0x1e, 0xbc,
	0xa5, 0xdf, 0x34, 0x1c, 0x3d, 0xd6, 0x25, 0xbf, 0x42, 0xcf, 0xc7, 0xa9, 0x1e, 0x85, 0x5d, 0x2e,
	0x5c, 0xcb, 0x03, 0xd7, 0xf2, 0x16, 0xb0, 0x35, 0xe0, 0xcc, 0x51, 0x17, 0x8e, 0xf2, 0x2b, 0xbb,
	0xcb, 0x14, 0x7a, 0xce, 0x8e, 0xc6, 0xa9, 0x05, 0x92, 0xaf, 0x00, 0xda, 0x93, 0xff, 0x77, 0x4c,
	0x1f, 0x55, 0x63, 0x3a, 0xfb, 0x11, 0x2e, 0xb9, 0x98, 0xb0, 0x35, 0xaa, 0x9c, 0x4f, 0x36, 0x6c,
	0xad, 0x72, 0x7e, 0x55, 0x8d, 0xe8, 0xc4, 0xfe, 0x88, 0xaa, 0x9f, 0x4e, 0x9d, 0xda, 0x6c, 0xe8,
	0x1f, 0xe0, 0x97, 0x16, 0xfd, 0x99, 0x9c, 0xff, 0xaa, 0xd6, 0x5d, 0xb7, 0xfc, 0xf2, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x3f, 0x3d, 0x2f, 0x44, 0xf0, 0x06, 0x00, 0x00,
}
