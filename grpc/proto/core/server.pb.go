// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/proto/core/server.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("grpc/proto/core/server.proto", fileDescriptor_836eadcd9329f03f) }

var fileDescriptor_836eadcd9329f03f = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0x51, 0x8b, 0xd4, 0x30,
	0x14, 0x85, 0xe3, 0x32, 0x76, 0xd9, 0xac, 0x20, 0x5c, 0xd4, 0xdd, 0x8d, 0xbb, 0x0a, 0x79, 0xf1,
	0xc9, 0x0e, 0x8c, 0xf8, 0xa4, 0x28, 0xb4, 0xc8, 0xa2, 0x88, 0xac, 0x2e, 0xf3, 0xe2, 0x5b, 0x27,
	0xbd, 0x53, 0xe3, 0x94, 0xa4, 0x93, 0x66, 0x06, 0xfc, 0x15, 0xfe, 0x47, 0xff, 0x85, 0x6f, 0x92,
	0xa4, 0xe3, 0x76, 0xda, 0xcc, 0x5b, 0x39, 0xdf, 0x3d, 0x87, 0x73, 0x49, 0x52, 0x7a, 0x59, 0x99,
	0x46, 0x4c, 0x1b, 0xa3, 0xad, 0x9e, 0x0a, 0x6d, 0x70, 0xda, 0xa2, 0xd9, 0xa2, 0x49, 0xbd, 0x02,
	0x13, 0x27, 0x31, 0x36, 0x9c, 0x69, 0x70, 0x37, 0xc1, 0xae, 0x86, 0x4c, 0xfc, 0x28, 0x94, 0xc2,
	0xba, 0xc3, 0xcf, 0x23, 0x58, 0x2a, 0xa1, 0x4b, 0x0c, 0x03, 0xb3, 0xdf, 0xf7, 0xe8, 0xc4, 0xc5,
	0xc1, 0x3b, 0x7a, 0x22, 0x55, 0x6b, 0x8b, 0xba, 0xc6, 0x12, 0x9e, 0xa4, 0x6e, 0x38, 0xfd, 0x86,
	0xeb, 0x1b, 0x44, 0xf3, 0x71, 0xa7, 0xb3, 0xb3, 0x9d, 0xde, 0x36, 0x7b, 0x80, 0x13, 0xb8, 0xa6,
	0x0f, 0xbc, 0x5f, 0x59, 0x59, 0x58, 0x2c, 0xe1, 0x62, 0x1c, 0xd1, 0x21, 0xc6, 0x22, 0x29, 0x1d,
	0xe3, 0x64, 0xf6, 0xf7, 0x88, 0x1e, 0x77, 0x4b, 0xc0, 0x1b, 0x9a, 0x08, 0x83, 0x85, 0xc5, 0x5e,
	0xa3, 0x3c, 0xb0, 0xdc, 0xeb, 0xfd, 0x46, 0x7b, 0x80, 0x13, 0x78, 0x4d, 0x27, 0x3f, 0xb5, 0x54,
	0xf0, 0x68, 0x68, 0xfd, 0xa4, 0xa5, 0x62, 0x8f, 0x47, 0x46, 0x27, 0x07, 0x5b, 0x2d, 0x5b, 0x3b,
	0xb6, 0x7d, 0x96, 0xad, 0x8d, 0xd8, 0x9c, 0xcc, 0x09, 0x7c, 0xa0, 0x89, 0xd0, 0x6a, 0x29, 0x2b,
	0x78, 0x3a, 0xaa, 0xea, 0xf5, 0xac, 0xd6, 0x62, 0xc5, 0x2e, 0xc7, 0x7d, 0xef, 0x68, 0x88, 0xd9,
	0x34, 0xa5, 0xdb, 0x78, 0x14, 0x33, 0xf7, 0xfa, 0xa1, 0x98, 0x1e, 0x0d, 0x4b, 0xb4, 0xb2, 0x8a,
	0xec, 0x7e, 0x2b, 0xab, 0xd8, 0xee, 0x4e, 0xe6, 0x64, 0xf6, 0xe7, 0x88, 0x9e, 0xfc, 0xbf, 0x21,
	0x90, 0xd1, 0xe3, 0xee, 0x4a, 0xf4, 0x4e, 0x33, 0x77, 0x38, 0xd7, 0x25, 0x76, 0x87, 0xdf, 0x3f,
	0xcd, 0x21, 0xe3, 0x04, 0xbe, 0xd0, 0xd3, 0xde, 0xb5, 0x80, 0xab, 0x03, 0x39, 0x01, 0xb3, 0x67,
	0x87, 0xb2, 0x02, 0xe7, 0xc4, 0x75, 0xda, 0x34, 0x95, 0x29, 0x4a, 0x8c, 0x75, 0x9a, 0x07, 0x14,
	0xed, 0xd4, 0x31, 0x4e, 0xe0, 0x3d, 0x4d, 0xa4, 0xda, 0xea, 0x15, 0xc2, 0x79, 0xac, 0x8e, 0x23,
	0xec, 0x22, 0xda, 0xc4, 0x21, 0x4e, 0xe0, 0x2d, 0xbd, 0xbf, 0xde, 0xa0, 0xf9, 0x05, 0x67, 0x63,
	0xff, 0x57, 0x07, 0xd8, 0x79, 0xc4, 0xee, 0x09, 0x27, 0xd9, 0x35, 0x7d, 0x21, 0x54, 0x5a, 0x2c,
	0xd0, 0x48, 0x91, 0x2e, 0x8b, 0x85, 0x91, 0xe2, 0xa5, 0xa8, 0x25, 0x2a, 0x9b, 0xba, 0xd7, 0x1a,
	0x1e, 0xa6, 0xf7, 0x67, 0xa7, 0xb7, 0xfe, 0x6f, 0x70, 0xe3, 0x94, 0xef, 0x0f, 0x07, 0x6f, 0x79,
	0x91, 0xf8, 0xef, 0x57, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x01, 0x42, 0xf3, 0x44, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeerClient is the client API for Peer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerClient interface {
	Installed(ctx context.Context, in *ReqPeerInstalled, opts ...grpc.CallOption) (*RespPeerInstalled, error)
	Instantiated(ctx context.Context, in *ReqPeerInstantiated, opts ...grpc.CallOption) (*RespPeerInstantiated, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) Installed(ctx context.Context, in *ReqPeerInstalled, opts ...grpc.CallOption) (*RespPeerInstalled, error) {
	out := new(RespPeerInstalled)
	err := c.cc.Invoke(ctx, "/core.peer/installed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) Instantiated(ctx context.Context, in *ReqPeerInstantiated, opts ...grpc.CallOption) (*RespPeerInstantiated, error) {
	out := new(RespPeerInstantiated)
	err := c.cc.Invoke(ctx, "/core.peer/instantiated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerServer is the server API for Peer service.
type PeerServer interface {
	Installed(context.Context, *ReqPeerInstalled) (*RespPeerInstalled, error)
	Instantiated(context.Context, *ReqPeerInstantiated) (*RespPeerInstantiated, error)
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_Installed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPeerInstalled)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).Installed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.peer/Installed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).Installed(ctx, req.(*ReqPeerInstalled))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_Instantiated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPeerInstantiated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).Instantiated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.peer/Instantiated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).Instantiated(ctx, req.(*ReqPeerInstantiated))
	}
	return interceptor(ctx, in, info, handler)
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.peer",
	HandlerType: (*PeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "installed",
			Handler:    _Peer_Installed_Handler,
		},
		{
			MethodName: "instantiated",
			Handler:    _Peer_Instantiated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/core/server.proto",
}

// ChannelClient is the client API for Channel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChannelClient interface {
	Create(ctx context.Context, in *ReqChannelCreate, opts ...grpc.CallOption) (*RespChannelCreate, error)
	Join(ctx context.Context, in *ReqChannelJoin, opts ...grpc.CallOption) (*RespChannelJoin, error)
	List(ctx context.Context, in *ReqChannelList, opts ...grpc.CallOption) (*RespChannelList, error)
	Config(ctx context.Context, in *ReqChannelConfigBlock, opts ...grpc.CallOption) (*RespChannelConfigBlock, error)
	Update(ctx context.Context, in *ReqChannelUpdateBlock, opts ...grpc.CallOption) (*RespChannelUpdateBlock, error)
	Sign(ctx context.Context, in *ReqChannelSign, opts ...grpc.CallOption) (*RespChannelSign, error)
}

type channelClient struct {
	cc *grpc.ClientConn
}

func NewChannelClient(cc *grpc.ClientConn) ChannelClient {
	return &channelClient{cc}
}

func (c *channelClient) Create(ctx context.Context, in *ReqChannelCreate, opts ...grpc.CallOption) (*RespChannelCreate, error) {
	out := new(RespChannelCreate)
	err := c.cc.Invoke(ctx, "/core.channel/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) Join(ctx context.Context, in *ReqChannelJoin, opts ...grpc.CallOption) (*RespChannelJoin, error) {
	out := new(RespChannelJoin)
	err := c.cc.Invoke(ctx, "/core.channel/join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) List(ctx context.Context, in *ReqChannelList, opts ...grpc.CallOption) (*RespChannelList, error) {
	out := new(RespChannelList)
	err := c.cc.Invoke(ctx, "/core.channel/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) Config(ctx context.Context, in *ReqChannelConfigBlock, opts ...grpc.CallOption) (*RespChannelConfigBlock, error) {
	out := new(RespChannelConfigBlock)
	err := c.cc.Invoke(ctx, "/core.channel/config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) Update(ctx context.Context, in *ReqChannelUpdateBlock, opts ...grpc.CallOption) (*RespChannelUpdateBlock, error) {
	out := new(RespChannelUpdateBlock)
	err := c.cc.Invoke(ctx, "/core.channel/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) Sign(ctx context.Context, in *ReqChannelSign, opts ...grpc.CallOption) (*RespChannelSign, error) {
	out := new(RespChannelSign)
	err := c.cc.Invoke(ctx, "/core.channel/sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelServer is the server API for Channel service.
type ChannelServer interface {
	Create(context.Context, *ReqChannelCreate) (*RespChannelCreate, error)
	Join(context.Context, *ReqChannelJoin) (*RespChannelJoin, error)
	List(context.Context, *ReqChannelList) (*RespChannelList, error)
	Config(context.Context, *ReqChannelConfigBlock) (*RespChannelConfigBlock, error)
	Update(context.Context, *ReqChannelUpdateBlock) (*RespChannelUpdateBlock, error)
	Sign(context.Context, *ReqChannelSign) (*RespChannelSign, error)
}

func RegisterChannelServer(s *grpc.Server, srv ChannelServer) {
	s.RegisterService(&_Channel_serviceDesc, srv)
}

func _Channel_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.channel/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Create(ctx, req.(*ReqChannelCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.channel/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Join(ctx, req.(*ReqChannelJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.channel/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).List(ctx, req.(*ReqChannelList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelConfigBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.channel/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Config(ctx, req.(*ReqChannelConfigBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelUpdateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.channel/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Update(ctx, req.(*ReqChannelUpdateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.channel/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Sign(ctx, req.(*ReqChannelSign))
	}
	return interceptor(ctx, in, info, handler)
}

var _Channel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.channel",
	HandlerType: (*ChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Channel_Create_Handler,
		},
		{
			MethodName: "join",
			Handler:    _Channel_Join_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Channel_List_Handler,
		},
		{
			MethodName: "config",
			Handler:    _Channel_Config_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Channel_Update_Handler,
		},
		{
			MethodName: "sign",
			Handler:    _Channel_Sign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/core/server.proto",
}

// ChaincodeClient is the client API for Chaincode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChaincodeClient interface {
	Install(ctx context.Context, in *ReqChainCodeInstall, opts ...grpc.CallOption) (*RespChainCodeInstall, error)
	Instantiate(ctx context.Context, in *ReqChainCodeInstantiate, opts ...grpc.CallOption) (*RespChainCodeInstantiate, error)
	Upgrade(ctx context.Context, in *ReqChainCodeUpgrade, opts ...grpc.CallOption) (*RespChainCodeUpgrade, error)
	Invoke(ctx context.Context, in *ReqChainCodeInvoke, opts ...grpc.CallOption) (*RespChainCodeInvoke, error)
	Query(ctx context.Context, in *ReqChainCodeQuery, opts ...grpc.CallOption) (*RespChainCodeQuery, error)
}

type chaincodeClient struct {
	cc *grpc.ClientConn
}

func NewChaincodeClient(cc *grpc.ClientConn) ChaincodeClient {
	return &chaincodeClient{cc}
}

func (c *chaincodeClient) Install(ctx context.Context, in *ReqChainCodeInstall, opts ...grpc.CallOption) (*RespChainCodeInstall, error) {
	out := new(RespChainCodeInstall)
	err := c.cc.Invoke(ctx, "/core.chaincode/install", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeClient) Instantiate(ctx context.Context, in *ReqChainCodeInstantiate, opts ...grpc.CallOption) (*RespChainCodeInstantiate, error) {
	out := new(RespChainCodeInstantiate)
	err := c.cc.Invoke(ctx, "/core.chaincode/instantiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeClient) Upgrade(ctx context.Context, in *ReqChainCodeUpgrade, opts ...grpc.CallOption) (*RespChainCodeUpgrade, error) {
	out := new(RespChainCodeUpgrade)
	err := c.cc.Invoke(ctx, "/core.chaincode/upgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeClient) Invoke(ctx context.Context, in *ReqChainCodeInvoke, opts ...grpc.CallOption) (*RespChainCodeInvoke, error) {
	out := new(RespChainCodeInvoke)
	err := c.cc.Invoke(ctx, "/core.chaincode/invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeClient) Query(ctx context.Context, in *ReqChainCodeQuery, opts ...grpc.CallOption) (*RespChainCodeQuery, error) {
	out := new(RespChainCodeQuery)
	err := c.cc.Invoke(ctx, "/core.chaincode/query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChaincodeServer is the server API for Chaincode service.
type ChaincodeServer interface {
	Install(context.Context, *ReqChainCodeInstall) (*RespChainCodeInstall, error)
	Instantiate(context.Context, *ReqChainCodeInstantiate) (*RespChainCodeInstantiate, error)
	Upgrade(context.Context, *ReqChainCodeUpgrade) (*RespChainCodeUpgrade, error)
	Invoke(context.Context, *ReqChainCodeInvoke) (*RespChainCodeInvoke, error)
	Query(context.Context, *ReqChainCodeQuery) (*RespChainCodeQuery, error)
}

func RegisterChaincodeServer(s *grpc.Server, srv ChaincodeServer) {
	s.RegisterService(&_Chaincode_serviceDesc, srv)
}

func _Chaincode_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChainCodeInstall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.chaincode/Install",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServer).Install(ctx, req.(*ReqChainCodeInstall))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chaincode_Instantiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChainCodeInstantiate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServer).Instantiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.chaincode/Instantiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServer).Instantiate(ctx, req.(*ReqChainCodeInstantiate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chaincode_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChainCodeUpgrade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.chaincode/Upgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServer).Upgrade(ctx, req.(*ReqChainCodeUpgrade))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chaincode_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChainCodeInvoke)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.chaincode/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServer).Invoke(ctx, req.(*ReqChainCodeInvoke))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chaincode_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChainCodeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.chaincode/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServer).Query(ctx, req.(*ReqChainCodeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chaincode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.chaincode",
	HandlerType: (*ChaincodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "install",
			Handler:    _Chaincode_Install_Handler,
		},
		{
			MethodName: "instantiate",
			Handler:    _Chaincode_Instantiate_Handler,
		},
		{
			MethodName: "upgrade",
			Handler:    _Chaincode_Upgrade_Handler,
		},
		{
			MethodName: "invoke",
			Handler:    _Chaincode_Invoke_Handler,
		},
		{
			MethodName: "query",
			Handler:    _Chaincode_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/core/server.proto",
}
